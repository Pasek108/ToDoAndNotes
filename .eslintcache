[{"D:\\Języki\\React\\Test\\app\\src\\index.js":"1","D:\\Języki\\React\\Test\\app\\src\\App.js":"2","D:\\Języki\\React\\Test\\app\\src\\reportWebVitals.js":"3","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\getCategories.js":"4","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\updateNoteCategories.js":"5","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\getNotes.js":"6","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\deleteNote.js":"7","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\saveNote.js":"8","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\sendCategories.js":"9","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\formatBBCode.js":"10","D:\\Języki\\React\\Test\\app\\src\\services\\helperFunctions.js":"11","D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\Notes.js":"12","D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\Categories.js":"13","D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\CategoriesEdit.js":"14","D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\NoNotesHere.js":"15","D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\OpenNote.js":"16","D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\NotesListElement.js":"17","D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\CategoriesListElement.js":"18","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\ToDo.js":"19","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\ToDoCategories.js":"20","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\TaskList.js":"21","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Today.js":"22","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Next7Days.js":"23","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Important.js":"24","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Overdue.js":"25","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\UserList.js":"26","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Archive.js":"27","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\AccordionDivider.js":"28","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Task.js":"29","D:\\Języki\\React\\Test\\app\\src\\components\\ColorPicker.js":"30","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\MenuItem.js":"31","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\NewList.js":"32","D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\AddListModal.js":"33","D:\\Języki\\React\\Test\\app\\src\\components\\HelpAndContact.js":"34","D:\\Języki\\React\\Test\\app\\src\\components\\Preferences.js":"35","D:\\Języki\\React\\Test\\app\\src\\components\\Contact.js":"36","D:\\Języki\\React\\Test\\app\\src\\components\\Help.js":"37","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\getToDoLists.js":"38","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\addUserLists.js":"39","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\getTasks.js":"40","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\editTask.js":"41","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\addSubtask.js":"42","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\CompleteTask.js":"43","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\addTask.js":"44","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\completeTask.js":"45","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\deleteUserList.js":"46","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\restoreNote.js":"47"},{"size":500,"mtime":499162500000,"results":"48","hashOfConfig":"49"},{"size":13277,"mtime":1616436545010,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":499162500000,"results":"51","hashOfConfig":"49"},{"size":1142,"mtime":1614506347878,"results":"52","hashOfConfig":"49"},{"size":1487,"mtime":1614506402843,"results":"53","hashOfConfig":"49"},{"size":2112,"mtime":1614506377121,"results":"54","hashOfConfig":"49"},{"size":1864,"mtime":1614506332654,"results":"55","hashOfConfig":"49"},{"size":1005,"mtime":1614506388354,"results":"56","hashOfConfig":"49"},{"size":3494,"mtime":1614506396591,"results":"57","hashOfConfig":"49"},{"size":1524,"mtime":1614255897972,"results":"58","hashOfConfig":"49"},{"size":5618,"mtime":1615919851227,"results":"59","hashOfConfig":"49"},{"size":6699,"mtime":1616435609519,"results":"60","hashOfConfig":"49"},{"size":4141,"mtime":1616434148148,"results":"61","hashOfConfig":"49"},{"size":7120,"mtime":1616435790174,"results":"62","hashOfConfig":"49"},{"size":516,"mtime":1616426283441,"results":"63","hashOfConfig":"49"},{"size":8951,"mtime":1616435397097,"results":"64","hashOfConfig":"49"},{"size":7297,"mtime":1616434283366,"results":"65","hashOfConfig":"49"},{"size":1770,"mtime":1616425560999,"results":"66","hashOfConfig":"49"},{"size":984,"mtime":1616166303208,"results":"67","hashOfConfig":"49"},{"size":7029,"mtime":1616242244782,"results":"68","hashOfConfig":"49"},{"size":3320,"mtime":1616172039195,"results":"69","hashOfConfig":"49"},{"size":2039,"mtime":1616172841292,"results":"70","hashOfConfig":"49"},{"size":3284,"mtime":1616172836315,"results":"71","hashOfConfig":"49"},{"size":4692,"mtime":1616172889296,"results":"72","hashOfConfig":"49"},{"size":6157,"mtime":1616423990784,"results":"73","hashOfConfig":"49"},{"size":5968,"mtime":1616243807541,"results":"74","hashOfConfig":"49"},{"size":4673,"mtime":1616172886217,"results":"75","hashOfConfig":"49"},{"size":490,"mtime":1614633465456,"results":"76","hashOfConfig":"49"},{"size":17707,"mtime":1616243779390,"results":"77","hashOfConfig":"49"},{"size":824,"mtime":1614684687421,"results":"78","hashOfConfig":"49"},{"size":2513,"mtime":1616242217703,"results":"79","hashOfConfig":"49"},{"size":1151,"mtime":1616171406750,"results":"80","hashOfConfig":"49"},{"size":3815,"mtime":1616171328621,"results":"81","hashOfConfig":"49"},{"size":589,"mtime":1616169759376,"results":"82","hashOfConfig":"49"},{"size":4040,"mtime":1615324017792,"results":"83","hashOfConfig":"49"},{"size":1383,"mtime":1616175846313,"results":"84","hashOfConfig":"49"},{"size":6006,"mtime":1615924259547,"results":"85","hashOfConfig":"49"},{"size":1156,"mtime":1615916213578,"results":"86","hashOfConfig":"49"},{"size":445,"mtime":1615908569992,"results":"87","hashOfConfig":"49"},{"size":2714,"mtime":1615924503138,"results":"88","hashOfConfig":"49"},{"size":1253,"mtime":1615918317072,"results":"89","hashOfConfig":"49"},{"size":2458,"mtime":1616174711878,"results":"90","hashOfConfig":"49"},{"size":1922,"mtime":1615915865231,"results":"91","hashOfConfig":"49"},{"size":340,"mtime":1615915441695,"results":"92","hashOfConfig":"49"},{"size":1922,"mtime":1615915865231,"results":"93","hashOfConfig":"49"},{"size":1136,"mtime":1616241545186,"results":"94","hashOfConfig":"49"},{"size":737,"mtime":1616433729694,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"1p6xgk4",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"98"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"98"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"98"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"98"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Języki\\React\\Test\\app\\src\\index.js",[],["196","197"],"D:\\Języki\\React\\Test\\app\\src\\App.js",[],"D:\\Języki\\React\\Test\\app\\src\\reportWebVitals.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\getCategories.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\updateNoteCategories.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\getNotes.js",["198"],"import {\r\n    calculateDateAndTime,\r\n    isLocalStorageItemSet,\r\n    getLocalStorageCounter,\r\n    getCategory,\r\n    getLocalStorageItem\r\n} from '../helperFunctions';\r\n\r\n\r\nexport default function getNotes() {\r\n    if (!isLocalStorageItemSet(\"countNotes\")) localStorage.setItem(\"countNotes\", \"0\");\r\n\r\n    let categories = [];\r\n    const categoriesCount = getLocalStorageCounter(\"countCategories\");\r\n\r\n    for (let i = 1; i <= categoriesCount; i++) {\r\n        categories.push(getCategory(`category${i}`, { id: true, name: true, color: false }))\r\n    }\r\n\r\n    let notes = [];\r\n    const notesCount = getLocalStorageCounter(\"countNotes\");\r\n\r\n    for (let i = 1; i <= notesCount; i++) {\r\n        const note = getLocalStorageItem(`note${i}`);\r\n        notes.push(\r\n            {\r\n                id: parseInt(note[0]),\r\n                title: decodeURIComponent(note[1]),\r\n                category: note[2].split(\"/\").map((id) => {\r\n                    for (let j = 0; j < categories.length; j++) {\r\n                        if (parseInt(id) === categories[j].id) {\r\n                            return decodeURIComponent(categories[j].name);\r\n                        }\r\n                    }\r\n                }),\r\n                align: note[3],\r\n                note: decodeURIComponent(note[4]),\r\n                timestamp: new Date(parseInt(note[5])).getTime()\r\n            }\r\n        )\r\n\r\n        const parameters = { day: true, month: true, year: true, hours: true, minutes: true, seconds: true };\r\n        const dateAndTime = calculateDateAndTime(notes[i - 1].timestamp, parameters);\r\n        notes[i - 1].date = `${dateAndTime.day}-${dateAndTime.month}-${dateAndTime.year}`;\r\n        notes[i - 1].time = `${dateAndTime.hours}:${dateAndTime.minutes}:${dateAndTime.seconds}`;\r\n\r\n        if (notes.length > 0) {\r\n            for (let j = notes.length - 1; j > 0; j--) {\r\n                if (notes[j].timestamp > notes[j - 1].timestamp) {\r\n                    [notes[j], notes[j - 1]] = [notes[j - 1], notes[j]];\r\n                }\r\n                else break;\r\n            }\r\n        }\r\n    }\r\n\r\n    return notes;\r\n}","D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\deleteNote.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\saveNote.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\sendCategories.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\formatBBCode.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\helperFunctions.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\Notes.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\Categories.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\CategoriesEdit.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\NoNotesHere.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\OpenNote.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\NotesListElement.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\Notes\\CategoriesListElement.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\ToDo.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\ToDoCategories.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\TaskList.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Today.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Next7Days.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Important.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Overdue.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\UserList.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Archive.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\AccordionDivider.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\Task.js",["199"],"import React from 'react';\r\nimport { Icon, Segment, Checkbox, Grid, Modal, Header, Button, Divider } from 'semantic-ui-react';\r\n\r\nimport { calculateDateAndTime, isOverdue } from '../../services/helperFunctions';\r\n\r\nimport addSubtask from '../../services/To-Do/addSubtask';\r\nimport editTask from '../../services/To-Do/editTask';\r\nimport completeTask from '../../services/To-Do/completeTask';\r\n\r\nexport default class Task extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            task: props.task,\r\n            subTasks: props.task.sub_tasks,\r\n            editSubTasks: [],\r\n            countEditSubtasks: 0,\r\n            showAddSubTaskModal: false,\r\n            showEditTaskModal: false,\r\n            save: props.lang.save\r\n        }\r\n\r\n        this.addSubTask = this.addSubTask.bind(this);\r\n        this.editTask = this.editTask.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const parameters = { day: true, month: true, year: true, hours: true, minutes: true }\r\n\r\n        this.setState({\r\n            save: this.props.lang.save,\r\n            countEditSubtasks: this.state.subTasks.length,\r\n            editSubTasks: this.state.subTasks.map((elem, index) => {\r\n                const subTaskDate = calculateDateAndTime(elem.date_of_execute, parameters);\r\n                if (elem !== undefined) {\r\n                    return (\r\n                        <details key={index}>\r\n                            <summary className=\"cursor-pointer mb-1\">{elem.name}</summary>\r\n                            <div>\r\n                                <input type=\"text\"\r\n                                    className=\"new-subtask edit-subtask-name\"\r\n                                    placeholder={this.props.lang.subtask_name}\r\n                                    defaultValue={elem.name}\r\n                                    style={{ width: \"calc(100% - 1.5rem)\" }} />\r\n                                <input type=\"text\"\r\n                                    className=\"new-subtask edit-subtask-description\"\r\n                                    placeholder={this.props.lang.description}\r\n                                    defaultValue={elem.description}\r\n                                    style={{ width: \"calc(100% - 1.5rem)\" }} />\r\n                                <div>\r\n                                    <input type=\"datetime-local\"\r\n                                        className=\"new-subtask-date edit-subtask-date\"\r\n                                        min=\"2000-01-01T00:00:00\" max=\"2038-01-01T00:00:00\"\r\n                                        defaultValue={\r\n                                            (elem.date_of_execute !== 0)\r\n                                                ? `${subTaskDate.year}-${subTaskDate.month}-${subTaskDate.day}T${subTaskDate.hours}:${subTaskDate.minutes}:00`\r\n                                                : \"\"\r\n                                        } />\r\n\r\n                                    <div className=\"delete-subtask\" onClick={() => {\r\n                                        this.setState((state) => ({\r\n                                            editSubTasks: state.editSubTasks.map((elem, indexx) => {\r\n                                                if (indexx !== index) return elem;\r\n                                                else return undefined;\r\n                                            }),\r\n                                            countEditSubtasks: state.countEditSubtasks - 1\r\n                                        }))\r\n                                    }}>{this.props.lang.delete}</div>\r\n                                </div>\r\n                                <Divider />\r\n                            </div>\r\n                        </details>\r\n                    )\r\n                }\r\n            }, this.componentDidMount)\r\n        })\r\n    }\r\n\r\n    addSubTask() {\r\n        const newSubtask = document.getElementsByClassName(\"new-subtask\");\r\n        const newSubtaskDate = document.getElementsByClassName(\"new-subtask-date\");\r\n\r\n        let subTasks = this.state.subTasks;\r\n\r\n        if (newSubtask[0].value.trim() === \"\") return;\r\n        if (isNaN(newSubtaskDate[0].valueAsNumber)) newSubtaskDate[0].valueAsNumber = 3600000;\r\n\r\n        const subTask = {\r\n            id: subTasks.length + 1,\r\n            name: newSubtask[0].value.trim(),\r\n            description: newSubtask[1].value.trim(),\r\n            date_of_execute: newSubtaskDate[0].valueAsNumber - 3600000,\r\n            checked: 1 - 1\r\n        };\r\n\r\n        addSubtask(this.props.task.id, subTask);\r\n\r\n        subTask.checked = false;\r\n        subTasks.push(subTask);\r\n\r\n        this.setState({ subTasks: subTasks });\r\n    }\r\n\r\n    editTask() {\r\n        const taskImportant = document.getElementById(\"important\");\r\n        const taskName = document.getElementsByClassName(\"edit-task-name\");\r\n        const taskDescription = document.getElementsByClassName(\"edit-task-description\");\r\n        const taskDate = document.getElementsByClassName(\"edit-task-date\");\r\n        const list = document.getElementsByClassName(\"edit-task-select\");\r\n        const subTasksNames = document.getElementsByClassName(\"edit-subtask-name\")\r\n        const subTasksDescriptions = document.getElementsByClassName(\"edit-subtask-description\");\r\n        const subTaskDates = document.getElementsByClassName(\"edit-subtask-date\");\r\n\r\n        if (taskName[0].value.trim() === \"\") return;\r\n        if (isNaN(taskDate[0].valueAsNumber)) taskDate[0].valueAsNumber = 3600000;\r\n\r\n        let subTasks = [];\r\n        for (let i = 0; i < subTasksNames.length; i++) {\r\n            if (subTasksNames[i].value.trim() === \"\") continue;\r\n            if (isNaN(subTaskDates[i].valueAsNumber)) subTaskDates[i].valueAsNumber = 3600000;\r\n\r\n            subTasks.push({\r\n                id: i,\r\n                name: subTasksNames[i].value.trim(),\r\n                description: subTasksDescriptions[i].value.trim(),\r\n                date_of_execute: subTaskDates[i].valueAsNumber - 3600000,\r\n                checked: 0 + this.props.task.sub_tasks[i].checked\r\n            })\r\n        }\r\n\r\n        const task = {\r\n            id: this.props.task.id,\r\n            title: taskName[0].value.trim(),\r\n            description: taskDescription[0].value.trim(),\r\n            creation_date: new Date().getTime(),\r\n            date_of_execute: taskDate[0].valueAsNumber - 3600000,\r\n            list_id: parseInt(list[0].value),\r\n            important: taskImportant.checked ? 1 : 0,\r\n            repeat: \"0\",\r\n            how_often: \"0\",\r\n            how_many_times: \"0\",\r\n            archive: \"0\",\r\n            sub_tasks: subTasks\r\n        };\r\n\r\n        editTask(task);\r\n        this.setState({ task: task, subTasks: subTasks }, this.props.update);\r\n    }\r\n\r\n    render() {\r\n        const lang = this.props.lang;\r\n        if (this.state.save !== lang.save) this.componentDidMount();\r\n\r\n        const task = this.state.task;\r\n        const lists = this.props.lists;\r\n        const parameters = { day: true, month: true, year: true, hours: true, minutes: true }\r\n        const date = calculateDateAndTime(task.date_of_execute, parameters);\r\n        const now = calculateDateAndTime(new Date().getTime(), parameters);\r\n        let list = {};\r\n        for (let i = 0; i < lists.length; i++) {\r\n            if (lists[i].id === task.list_id) {\r\n                if (lists[i].name === \"Osobiste\") lists[i].name = lang.personal;\r\n                else if (lists[i].name === \"Praca\") lists[i].name = lang.work;\r\n                else if (lists[i].name === \"Dom\") lists[i].name = lang.house;\r\n\r\n                list = lists[i];\r\n            }\r\n        }\r\n\r\n        return (\r\n            <Segment style={{ position: \"relative\", paddingTop: \"1.2rem\" }}>\r\n                <Grid columns=\"2\">\r\n                    <Grid.Row>\r\n                        <Grid.Column width=\"12\">\r\n                            <div className=\"mb-05\">\r\n                                <strong className=\"task-title note-description\">\r\n                                    <Checkbox style={{ fontSize: \"1.2rem\" }} label={task.title} defaultChecked={task.archive} onClick={() => { completeTask(task); this.props.update() }} />\r\n                                </strong>\r\n                                <div className=\"task-description\">\r\n                                    {task.description}\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.state.subTasks.map((elem, index) => {\r\n                                const subTaskdate = calculateDateAndTime(elem.date_of_execute, parameters);\r\n\r\n                                return (\r\n                                    <div key={index} className=\"subtask\">\r\n                                        <Grid columns=\"2\">\r\n                                            <Grid.Row>\r\n                                                <Grid.Column width=\"12\">\r\n                                                    <strong>\r\n                                                        <Checkbox label={elem.name} defaultChecked={elem.checked} onClick={() => { completeTask(task, elem.id); this.props.update() }} />\r\n                                                    </strong>\r\n                                                    <div className=\"subtask-description\">\r\n                                                        {elem.description}\r\n                                                    </div>\r\n                                                </Grid.Column>\r\n                                                <Grid.Column width=\"4\" className=\"text-right\">\r\n                                                    {(elem.date_of_execute !== 0)\r\n                                                        ? (\r\n                                                            <div className=\"task-date\" style={(isOverdue(subTaskdate, now)) ? { fontWeight: \"bold\", color: \"#db2828\" } : {}}>\r\n                                                                <div>{`${subTaskdate.hours}:${subTaskdate.minutes}:00`}</div>\r\n                                                                <div className=\"ml-1\">{`${subTaskdate.day}-${subTaskdate.month}-${subTaskdate.year}`}</div>\r\n                                                            </div>\r\n                                                        ) : \"\"\r\n                                                    }\r\n                                                </Grid.Column>\r\n                                            </Grid.Row>\r\n                                        </Grid>\r\n                                    </div>\r\n                                );\r\n                            })}\r\n\r\n                            <Modal size='small'\r\n                                onClose={() => this.setState({ showAddSubTaskModal: false })}\r\n                                onOpen={() => this.setState({ showAddSubTaskModal: true })}\r\n                                open={this.state.showAddSubTaskModal}\r\n                                trigger={\r\n                                    <div className=\"subtask add-subtask cursor-pointer\" style={{ marginTop: 0 }}>\r\n                                        <Icon color=\"green\" name=\"plus circle\" />{lang.add_subtask}\r\n                                    </div>\r\n                                }>\r\n                                <Header icon>{lang.add_subtask}</Header>\r\n                                <Modal.Content>\r\n                                    <input type=\"text\" className=\"new-subtask\" placeholder={lang.subtask_name} />\r\n                                    <input type=\"text\" className=\"new-subtask\" placeholder={lang.description} />\r\n                                    <div>\r\n                                        <input type=\"datetime-local\" className=\"new-subtask-date\" min=\"2000-01-01T00:00:00\" max=\"2038-01-01T00:00:00\" />\r\n                                    </div>\r\n                                </Modal.Content>\r\n                                <Modal.Actions>\r\n                                    <Button basic color='red' icon=\"remove\" content={lang.cancel} onClick={() => this.setState({ showAddSubTaskModal: false })} />\r\n                                    <Button color='green' icon=\"checkmark\" content={lang.add} onClick={() => { this.addSubTask(); this.setState({ showAddSubTaskModal: false }) }} />\r\n                                </Modal.Actions>\r\n                            </Modal>\r\n\r\n                        </Grid.Column>\r\n\r\n                        <Grid.Column width=\"4\" className=\"text-right\">\r\n                            <div style={{ display: \"inline-block\", float: \"right\", width: \"100%\" }}>\r\n                                {(task.date_of_execute !== 0)\r\n                                    ? (\r\n                                        <div className=\"task-date\" style={(isOverdue(date, now)) ? { fontWeight: \"bold\", color: \"#db2828\" } : {}}>\r\n                                            <div>{`${date.hours}:${date.minutes}:00`}</div>\r\n                                            <div className=\"ml-1\">{`${date.day}-${date.month}-${date.year}`}</div>\r\n                                        </div>\r\n                                    )\r\n                                    : <div className=\"task-date\">{lang.no_term}</div>\r\n                                }\r\n                                <div className=\"task-list\"><Icon name=\"circle\" style={{ color: list.color }} /> {list.name}</div>\r\n\r\n                                <Modal size='small'\r\n                                    onClose={() => this.setState({ showEditTaskModal: false }, this.componentDidMount)}\r\n                                    onOpen={() => this.setState({ showEditTaskModal: true })}\r\n                                    open={this.state.showEditTaskModal}\r\n                                    trigger={\r\n                                        <div>\r\n                                            <Button color=\"blue\" className=\"task-edit-button\">\r\n                                                <Icon className=\"cursor-pointer float-right\" name=\"pencil\" /> {lang.edit}\r\n                                            </Button>\r\n                                        </div>\r\n                                    }>\r\n                                    <Header icon>{lang.edit_task}</Header>\r\n\r\n                                    <Modal.Content>\r\n                                        <div className=\"edit-task-important\">\r\n                                            <input type=\"checkbox\" id=\"important\" defaultChecked={task.important} />\r\n                                            <label htmlFor=\"important\">{lang.important}</label>\r\n                                        </div>\r\n                                        <input type=\"text\" className=\"new-subtask edit-task-name\" placeholder={lang.task_name} defaultValue={task.title} />\r\n                                        <input type=\"text\" className=\"new-subtask edit-task-description\" placeholder={lang.task_description} defaultValue={task.description} />\r\n                                        <div style={{ display: \"inline-block\", width: \"50%\" }}>\r\n                                            <input type=\"datetime-local\"\r\n                                                className=\"new-subtask-date edit-task-date\"\r\n                                                min=\"2000-01-01T00:00:00\" max=\"2038-01-01T00:00:00\"\r\n                                                defaultValue={(task.date_of_execute !== 0) ? `${date.year}-${date.month}-${date.day}T${date.hours}:${date.minutes}:00` : \"\"} />\r\n                                        </div>\r\n                                        <div style={{ display: \"inline-block\", width: \"50%\", textAlign: \"right\" }}>\r\n                                            {lang.list}:\r\n                                            <select className=\"edit-task-select\" defaultValue={list.id}>\r\n                                                {lists.map(elem => {\r\n                                                    return <option key={elem.id} value={elem.id}>{elem.name}</option>\r\n                                                })}\r\n                                            </select>\r\n                                        </div>\r\n                                        {(this.state.countEditSubtasks > 0)\r\n                                            ? (\r\n                                                <div>\r\n                                                    <Divider />\r\n                                                    <Header as=\"h4\" className=\"mt-0\">{lang.subtasks}:</Header>\r\n                                                    {this.state.editSubTasks}\r\n                                                </div>\r\n                                            )\r\n                                            : \"\"}\r\n                                    </Modal.Content>\r\n\r\n                                    <Modal.Actions>\r\n                                        <Button basic color='red' icon=\"remove\" content={lang.cancel} onClick={() => this.setState({ showEditTaskModal: false }, this.componentDidMount)} />\r\n                                        <Button color='green' icon=\"checkmark\" content={lang.save} onClick={() => { this.editTask(); this.setState({ showEditTaskModal: false }) }} />\r\n                                    </Modal.Actions>\r\n                                </Modal>\r\n                            </div>\r\n                        </Grid.Column>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Segment>\r\n        );\r\n    }\r\n}","D:\\Języki\\React\\Test\\app\\src\\components\\ColorPicker.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\MenuItem.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\NewList.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\ToDo\\AddListModal.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\HelpAndContact.js",[],"D:\\Języki\\React\\Test\\app\\src\\components\\Preferences.js",["200"],"import React from 'react';\r\nimport { Checkbox, Container, Divider, Header, Icon, Select } from 'semantic-ui-react';\r\n\r\nfunction Theme(props) {\r\n    const themes = [\r\n        { key: 'neutral', value: 'Neutral', text: 'Neutralny' },\r\n        { key: 'warm', value: 'Warm', text: 'Ciepły' },\r\n        { key: 'cold', value: 'Cold', text: 'Zimny' }\r\n    ]\r\n\r\n    return (\r\n        <>\r\n            <Header as=\"h2\">Motyw</Header>\r\n            <Container fluid className=\"preferences-container\">\r\n                <div className=\"flex\">\r\n                    <strong>Ciemny motyw:</strong>\r\n                    <Checkbox toggle className=\"mx-05\" />\r\n                    <Icon name=\"question circle\" style={{ fontSize: \"1.5rem\" }} />\r\n                </div>\r\n                <Divider />\r\n\r\n                <div className=\"flex\">\r\n                    <div className=\"flex break\">\r\n                        <strong>Automatyczna zmiana motywu:</strong>\r\n                        <Checkbox toggle className=\"mx-05\" />\r\n                        <Icon name=\"question circle\" style={{ fontSize: \"1.5rem\" }} />\r\n                    </div>\r\n                    <div><br />\r\n                        Od: <input type=\"time\" className=\"preferences-date ml-02\" />\r\n                        <div className=\"mx-05\" style={{ display: \"inline-block\" }} />\r\n                        Do: <input type=\"time\" className=\"preferences-date ml-02\" />\r\n                    </div>\r\n                </div>\r\n                <Divider />\r\n\r\n                <div className=\"flex\">\r\n                    <strong className=\"break mb-1\">Typ motywu:</strong>\r\n                    <div className=\"break mb-05\">\r\n                        <div className=\"label\">Jasny:</div>\r\n                        <select className=\"preferences-select mx-05\">\r\n                            {themes.map(elem => {\r\n                                return <option key={elem.key} value={elem.value}>{elem.text}</option>\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"label\">Ciemny:</div>\r\n                        <select className=\"preferences-select mx-05\">\r\n                            {themes.map(elem => {\r\n                                return <option key={elem.key} value={elem.value}>{elem.text}</option>\r\n                            })}\r\n                        </select>\r\n                    </div>\r\n                </div>\r\n                <Divider />\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction ImportExport(props) {\r\n    return (\r\n        <>\r\n            <Header as=\"h2\">Import/Eksport</Header>\r\n            <Container fluid className=\"preferences-container\">\r\n\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Other(props) {\r\n    return (\r\n        <>\r\n            <Header as=\"h2\">Pozostałe</Header>\r\n            <Container fluid className=\"preferences-container\">\r\n                <div className=\"flex\">\r\n                    <strong>Wyłącz animacje:</strong>\r\n                    <Checkbox toggle className=\"mx-05\" />\r\n                </div>\r\n                <Divider />\r\n\r\n                <div className=\"flex\">\r\n                    <strong>Wyłącz ostrzeżenia:</strong>\r\n                    <Checkbox toggle className=\"mx-05\" />\r\n                </div>\r\n                <Divider />\r\n\r\n                <div className=\"flex\">\r\n                    <strong>Autozapis notatek:</strong>\r\n                    <Checkbox toggle className=\"mx-05\" />\r\n                </div>\r\n                <Divider />\r\n            </Container>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default function Preferences(props) {\r\n    return (\r\n        <div style={{ minHeight: \"calc(100vh - 7.2rem)\", paddingBottom: \"1rem\" }}>\r\n            <Container>\r\n                <Theme />\r\n                <ImportExport />\r\n                <Other />\r\n                <div className=\"backup-default-settings\">Przywróć ustawienia domyślne</div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","D:\\Języki\\React\\Test\\app\\src\\components\\Contact.js",["201"],"import React from 'react';\r\nimport { Container, Header } from 'semantic-ui-react';\r\n\r\nexport default function Contact(props) {\r\n    const lang = props.lang;\r\n    return (\r\n        <div style={{ minHeight: \"calc(100vh - 7.2rem)\", paddingBottom: \"1rem\" }}>\r\n            <Container>\r\n                <div className=\"mb-1\" style={{ width: \"80%\", float: \"left\" }}>\r\n                    <Header as=\"h2\">{lang.contact}</Header>\r\n                    <p>{lang.welcome}.</p>\r\n                    <ul>\r\n                        <li>{lang.questions_list.bug}?</li>\r\n                        <li>{lang.questions_list.question} <a href=\"#\" onClick={props.openHelp}>{lang.questions_list.help}</a>?</li>\r\n                        <li>{lang.questions_list.change}?</li>\r\n                    </ul>\r\n                    <p>{lang.describe_problem}. </p>\r\n                </div>\r\n                <div style={{ width: \"20%\", float: \"left\" }} className=\"known-problems\">\r\n                    <div>{lang.list_of_known_bugs}</div>\r\n                    <ul>\r\n                        <li>{lang.no_known_bugs}</li>\r\n                    </ul>\r\n                </div>\r\n                <div style={{ width: \"100%\", float: \"left\" }}>\r\n                    <textarea rows=\"15\" placeholder={lang.write_a_message} className=\"contact-textarea\" />\r\n                </div>\r\n            </Container>\r\n        </div>\r\n    );\r\n}","D:\\Języki\\React\\Test\\app\\src\\components\\Help.js",["202","203","204","205","206"],"import React, { useState } from 'react';\r\nimport { Container, Grid, Menu, List, Card, Header } from 'semantic-ui-react';\r\n\r\nfunction HelpMainPage(props) {\r\n    return (\r\n        <>\r\n            <Header as=\"h3\">Pomoc</Header>\r\n            <p>\r\n                W tej części strony znajduje się opis jej funkcji oraz szybkie odpowiedzi na pytania.\r\n                Jeśli czegoś nie wiesz zajrzyj w szybkie pytania w części która sprawia ci problemy. \r\n                Jeśli nie znajdziesz tam odpowiedzi na swoje pytanie przeglądnij wszystko z nią związane z możesz je zadać <a href=\"#\" onClick={props.openContact}>tutaj</a>\r\n            </p>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction TaskListHelp(props) {\r\n    return (\r\n        <>\r\n            <Card fluid>\r\n                <Card.Content description={\r\n                    <List ordered>\r\n                        <List.Item as='a'>Ekran główny</List.Item>\r\n                        <List.Item>\r\n                            <a>Listy zadań</a>\r\n                            <List.List>\r\n                                <List.Item as='a'>Gotowe listy</List.Item>\r\n                                <List.Item as='a'>Listy użytkownika</List.Item>\r\n                                <List.Item as='a'>Dodawanie nowych list</List.Item>\r\n                                <List.Item as='a'>Usuwanie list</List.Item>\r\n                                <List.Item as='a'>Edycja list</List.Item>\r\n                            </List.List>\r\n                        </List.Item>\r\n                        <List.Item>\r\n                            <a>Zadania</a>\r\n                            <List.List>\r\n                                <List.Item as='a'>Dodawanie zadań</List.Item>\r\n                                <List.Item as='a'>Dodawanie zadań podrzędnych</List.Item>\r\n                                <List.Item as='a'>Edycja zadań i ich zadań podrzędnych</List.Item>\r\n                                <List.Item as='a'>Usuwanie zadań</List.Item>\r\n                            </List.List>\r\n                        </List.Item>\r\n                        <List.Item as='a'>Szybkie pytania</List.Item>\r\n                    </List>\r\n                } />\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction NotesHelp(props) {\r\n    return (\r\n        <>\r\n            <Card fluid>\r\n                <Card.Content description={\r\n                    <List ordered>\r\n                        <List.Item as='a'>Ekran głowny</List.Item>\r\n                        <List.Item as='a'>Kategorie</List.Item>\r\n                        <List.Item>\r\n                            <a>Notatki</a>\r\n                            <List.List>\r\n                                <List.Item as='a'>Dodawanie notatek</List.Item>\r\n                                <List.Item as='a'>Edycja notatek</List.Item>\r\n                                <List.Item as='a'>Przypisywanie notatek do kategorii</List.Item>\r\n                                <List.Item as='a'>Usuwanie Notatek</List.Item>\r\n                            </List.List>\r\n                        </List.Item>\r\n                        <List.Item as='a'>Szybkie pytania</List.Item>\r\n                    </List>\r\n                } />\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction PreferencesHelp(props) {\r\n    return (\r\n        <>\r\n            <Card fluid>\r\n                <Card.Content description={\r\n                    <List ordered>\r\n                        <List.Item as='a'>Motyw</List.Item>\r\n                        <List.Item>\r\n                            <a>Import/Eksport</a>\r\n                            <List.List>\r\n                                <List.Item as='a'>Po co jest ta opcja?</List.Item>\r\n                                <List.Item as='a'>Import zadań i notatek</List.Item>\r\n                                <List.Item as='a'>Eksport zadań i notatek</List.Item>\r\n                            </List.List>\r\n                        </List.Item>\r\n                        <List.Item as='a'>Pozostałe</List.Item>\r\n                        <List.Item as='a'>Szybkie pytania</List.Item>\r\n                    </List>\r\n                } />\r\n            </Card>\r\n        </>\r\n    );\r\n}\r\n\r\nfunction Questions(props) {\r\n    return (\r\n        <>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default function Help(props) {\r\n    const [activeItem, setActive] = useState(0);\r\n    const backgroundWhite = { background: \"#fafafa\" };\r\n    const backgroundUnset = { background: \"unset\" };\r\n\r\n    const menuNames = [\"Strona pomocy\", \"Lista zadań\", \"Notatki\", \"Preferencje\", \"Pytania ogólne\"];\r\n    let menuItems = [];\r\n    let activeContent;\r\n    for (let i = 0; i < 5; i++) {\r\n        menuItems.push(\r\n            <Menu.Item style={(activeItem === i) ? backgroundWhite : backgroundUnset}\r\n                name={menuNames[i]}\r\n                active={activeItem === i}\r\n                onClick={() => setActive(i)}\r\n            />\r\n        )\r\n\r\n        if (activeItem === 0) activeContent = <HelpMainPage openContact={props.openContact} />\r\n        else if (activeItem === 1) activeContent = <TaskListHelp />\r\n        else if (activeItem === 2) activeContent = <NotesHelp />\r\n        else if (activeItem === 3) activeContent = <PreferencesHelp />\r\n        else if (activeItem === 4) activeContent = <Questions />\r\n    }\r\n\r\n    return (\r\n        <Container>\r\n            <Grid columns={2} style={{ minHeight: \"calc(100vh - 5.2rem)\", paddingBottom: \"1rem\" }}>\r\n                <Grid.Row className=\"p-0\">\r\n                    <Grid.Column width={3} className=\"p-0\">\r\n                        <Menu fluid vertical tabular style={{ height: \"100%\", padding: \"1rem 0\" }}>\r\n                            {menuItems}\r\n                        </Menu>\r\n                    </Grid.Column>\r\n\r\n                    <Grid.Column width={13} className=\"p-1\" style={backgroundWhite}>\r\n                        {activeContent}\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n}","D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\getToDoLists.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\addUserLists.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\getTasks.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\editTask.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\addSubtask.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\CompleteTask.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\addTask.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\completeTask.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\To-Do\\deleteUserList.js",[],"D:\\Języki\\React\\Test\\app\\src\\services\\Notes\\restoreNote.js",[],{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","replacedBy":"210"},{"ruleId":"211","severity":1,"message":"212","line":29,"column":55,"nodeType":"213","messageId":"214","endLine":29,"endColumn":57},{"ruleId":"211","severity":1,"message":"212","line":33,"column":65,"nodeType":"213","messageId":"214","endLine":33,"endColumn":67},{"ruleId":"215","severity":1,"message":"216","line":2,"column":54,"nodeType":"217","messageId":"218","endLine":2,"endColumn":60},{"ruleId":"219","severity":1,"message":"220","line":14,"column":60,"nodeType":"221","endLine":14,"endColumn":97},{"ruleId":"219","severity":1,"message":"220","line":11,"column":124,"nodeType":"221","endLine":11,"endColumn":164},{"ruleId":"219","severity":1,"message":"222","line":25,"column":29,"nodeType":"221","endLine":25,"endColumn":32},{"ruleId":"219","severity":1,"message":"222","line":35,"column":29,"nodeType":"221","endLine":35,"endColumn":32},{"ruleId":"219","severity":1,"message":"222","line":60,"column":29,"nodeType":"221","endLine":60,"endColumn":32},{"ruleId":"219","severity":1,"message":"222","line":84,"column":29,"nodeType":"221","endLine":84,"endColumn":32},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation"]